generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  username String @unique
}

model Student {
  id          String       @id @default(uuid())
  username    String       @unique
  name        String
  fatherName  String
  motherName  String
  img         String?
  createdAt   DateTime     @default(now())
  branchId    Int
  branch      Branch     @relation(fields: [branchId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[] 
  results     Result[] 
}

model Teacher {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  courses   Course[] 
  lectures  Lectures[]  
  branches  Branch[]  
  birthday  DateTime
}

model Registrar {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime
}

model Grade {
  id        Int       @id @default(autoincrement())
  level     Int       @unique
  students  Student[] 
  branches  Branch[] 
}

model Branch {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  capacity     Int
  supervisorId String?  @unique
  supervisor   Teacher? @relation(fields: [supervisorId], references: [id])
  lectures     Lectures[] 
  students     Student[] 
  gradeId      Int?
  grade        Grade?    @relation(fields: [gradeId], references: [id])
  announcements Announcement[] 
}

model Course {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  teachers   Teacher[] 
  lectures   Lectures[] 
}

model Lectures {
  id         Int       @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime

  courseId   Int
  course     Course    @relation(fields: [courseId], references: [id])
  branchId   Int
  branch     Branch  @relation(fields: [branchId], references: [id])
  teacherId  String
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  exams      Exam[] 
  assignments Assignment[] 
  attendances Attendance[] 
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lecturesId Int
  lectures   Lectures  @relation(fields: [lecturesId], references: [id])
  results   Result[] 
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lecturesId Int
  lectures   Lectures  @relation(fields: [lecturesId], references: [id])
  results   Result[] 
}

model Result {
  id          Int      @id @default(autoincrement())
  score       Int

  examId      Int?
  exam        Exam?    @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment  Assignment? @relation(fields: [assignmentId], references: [id])
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])

  lecturesId Int
  lectures   Lectures  @relation(fields: [lecturesId], references: [id])
}


model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  startTime DateTime
  endTime   DateTime

  branchId    Int?
  branch    Branch? @relation(fields: [branchId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
