generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  username String @unique
}

model Student {
  id          String       @id @default(uuid())
  username    String       @unique
  password    String
  name        String
  fatherName  String
  motherName  String
  img         String?
  address     String?
  birthday    DateTime
  phone       String
  email       String?
  sex         UserSex?
  bloodType   String? 
  createdAt   DateTime     @default(now())
  branchId    Int
  branch      Branch     @relation(fields: [branchId], references: [id])
  semesterId     Int
  semester       Semester       @relation(fields: [semesterId], references: [id])
  attendances Attendance[] 
  results     Result[] 
}

model Teacher {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  password  Division
  division  String
  phone     String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  subjects   Subject[] 
  lectures  Lectures[]  
  branches  Branch[] 
}

model Registrar {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  email     String?   @unique
  phone     String?   @unique
  createdAt DateTime  @default(now())
}

model Semester {
  id        Int       @id @default(autoincrement())
  level     Int       @unique
  students  Student[] 
  branches  Branch[] 
  subjects  Subject[]  // Added inverse relation
}


model Branch {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  capacity     Int
  supervisorId String?  @unique
  supervisor   Teacher? @relation(fields: [supervisorId], references: [id])
  lectures     Lectures[] 
  students     Student[] 
  semesterId   Int?
  semester     Semester? @relation(fields: [semesterId], references: [id])
  announcements Announcement[] 

  subjects     Subject[]  // Added inverse relation
}


model Subject {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  subjectCode String
  type       SubjectType
  maxMarks   Int 
  branchId   Int
  branch     Branch    @relation(fields: [branchId], references: [id])
  semesterId Int?
  semester   Semester? @relation(fields: [semesterId], references: [id])
  teachers   Teacher[] 
  lectures   Lectures[] 
}

model Lectures {
  id         Int       @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime

  subjectId  Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  branchId   Int
  branch     Branch   @relation(fields: [branchId], references: [id])
  teacherId  String
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  attendances Attendance[]

  exams      Exam[]    // Added inverse relation
}


model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lecturesId Int
  lectures   Lectures  @relation(fields: [lecturesId], references: [id])
  results    Result[] 
}


model Result {
  id               Int      @id @default(autoincrement())
  sessionalExam    String?
  endTerm          String?
  overallMark      String  
  grade            String
  examId           Int?
  exam             Exam?    @relation(fields: [examId], references: [id])
  studentId        String
  student          Student  @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id])

  lecturesId Int
  lectures   Lectures  @relation(fields: [lecturesId], references: [id])
}


model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  startTime DateTime
  endTime   DateTime

  branchId    Int?
  branches    Branch[]
}

enum SubjectType{
  THEORY
  PRACTICAL
}

enum UserSex {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Division {
  ISTC
  LIBRARY
}